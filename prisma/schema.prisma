generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  street        String?
  street2       String?
  suburb        String?
  state         StateEnum?
  postcode      String?
  image         String?
  role          UserRole   @default(CUSTOMER)
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
}

model Order {
  id                  String            @id @default(cuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  customerNotes       String?           @db.Text
  items               LineItem[]
  total               Int
  status              OrderStatus
  type                OrderType
  paymentType         OrderPaymentType?
  email               String
  hasSentOrderEmail   Boolean?
  hasSentReceiptEmail Boolean?
  expressShipping     Boolean?
  stripeId            String?
  user                User?             @relation(fields: [userId], references: [id])
  userId              String?
}

model LineItem {
  id       String @id @default(cuid())
  amount   Int
  metadata String @db.MediumText
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
}

model RingShape {
  id            String                @id @default(cuid())
  order         Int                   @default(0)
  name          String                @unique
  previewImage  String                @db.VarChar(512)
  examples      RingShapeExample[]
  presets       RingEngravingPreset[]
  modelUrl      String
  templateFront String?               @db.VarChar(512)
  templateSide1 String?               @db.VarChar(512)
  templateSide2 String?               @db.VarChar(512)
  templateInner String?               @db.VarChar(512)
  materials     RingMaterial[]
  price         Int
}

model RingShapeExample {
  id          String    @id @default(cuid())
  name        String?
  imageUrl    String    @db.VarChar(512)
  ringShape   RingShape @relation(fields: [ringShapeId], references: [id], onDelete: Cascade)
  ringShapeId String
}

model RingMaterial {
  id               String      @id @default(cuid())
  name             String
  ambientOcclusion String?
  baseColor        String?
  metallic         String?
  roughness        String?
  normal           String?
  emissive         String?
  previewImage     String?     @db.VarChar(512)
  shapes           RingShape[]
  price            Int
}

model RingEngraving {
  id            String            @id @default(cuid())
  type          RingEngravingType
  face          RingFace          @default(FRONT)
  imageUrl      String?           @db.VarChar(512)
  canvasData    String?           @db.MediumText
  text          String?
  fontFamily    String?
  flippedX      Boolean?
  flippedY      Boolean?
  invertedColor Boolean?
}

model RingEngravingPreset {
  id       String      @id @default(cuid())
  face     RingFace    @default(FRONT)
  shapes   RingShape[]
  imageUrl String?     @db.VarChar(512)
  name     String
  order    Int         @default(0)
}

model TeethMaterial {
  id             String                 @id @default(cuid())
  name           String                 @unique
  variants       TeethMaterialVariant[]
  hasOptions     Boolean                @default(false)
  labourCost     Int
  options        TeethMaterialOption[]
  optionsHeading String?
}

model TeethMaterialVariant {
  id             String        @id @default(cuid())
  name           String
  previewImage   String        @db.VarChar(512)
  price          Int
  singleRowOnly  Boolean       @default(false)
  toothBgImage   String?       @db.VarChar(512)
  baseMaterial   TeethMaterial @relation(fields: [baseMaterialId], references: [id], onDelete: Cascade)
  baseMaterialId String
}

model TeethMaterialOption {
  id             String        @id @default(cuid())
  name           String
  previewImage   String        @db.VarChar(512)
  price          Int
  baseMaterial   TeethMaterial @relation(fields: [baseMaterialId], references: [id], onDelete: Cascade)
  baseMaterialId String
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum StateEnum {
  WA
  NT
  SA
  QLD
  NSW
  VIC
  TAS
  ACT
}

enum OrderType {
  GRILLZ
  RING
}

enum OrderPaymentType {
  DEPOSIT
  FULL_PAYMENT
  PARTIAL_PAYMENT
}

enum OrderStatus {
  UNPAID
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

enum RingFace {
  FRONT
  SIDE1
  SIDE2
  INNER
}

enum RingEngravingType {
  TEXT
  DRAWING
  IMAGE
  PRESET
}
